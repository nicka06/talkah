# üöÄ Stripe Subscription Integration Plan

## üìã Overview
Implement a complete subscription system with three tiers (Free, Pro, Premium) using Stripe mobile SDK for App Store/Google Play integration, with usage tracking based on billing anniversary dates.

## ‚úÖ **COMPLETED PHASES**

### ‚úÖ Phase 1: Database Schema & Environment Setup - **COMPLETED** ‚úÖ
- ‚úÖ Updated users table with subscription fields
- ‚úÖ Created subscription_plans table with 3 tiers (Free/Pro/Premium)
- ‚úÖ Created usage_tracking table with billing periods
- ‚úÖ Created subscription_events table for audit trail
- ‚úÖ Built get_current_usage() database function
- ‚úÖ Built increment_usage() database function with limit checking
- ‚úÖ **TESTED & WORKING**: Current usage shows 1/1 phone calls used (Free plan)

### ‚úÖ Phase 4: Flutter Models & Services - **COMPLETED** ‚úÖ
- ‚úÖ Created SubscriptionPlan model with helper getters
- ‚úÖ Created UsageTracking model with progress calculations
- ‚úÖ Created SubscriptionService for database operations
- ‚úÖ Updated ApiService with usage checking & limit enforcement
- ‚úÖ Created UsageDisplayWidget with progress bars
- ‚úÖ **TESTED & WORKING**: Usage limits enforced, exceptions thrown when at limit

---

## üéØ **NEXT IMMEDIATE STEPS (Priority Order)**

### üî• **STEP 1: Add Usage Display to App** (30 minutes)
**Goal**: Show users their current usage status
- Add UsageDisplayWidget to home/dashboard screen
- Test the display with current 1/1 phone call usage
- Verify progress bars show correctly

### üî• **STEP 2: Create Upgrade Prompts** (1 hour)
**Goal**: Guide users to upgrade when they hit limits
- Create subscription upgrade modal/dialog
- Trigger when UsageLimitException is caught
- Show plan comparison with upgrade options
- Add "Upgrade Plan" buttons throughout app

### üî• **STEP 3: Build Subscription Management UI** (2 hours)
**Goal**: Let users see plans and pricing
- Create subscription management screen
- Show current plan status
- Display all available plans with features
- Add monthly/yearly pricing toggle

### üî• **STEP 4: Stripe Integration** (4 hours)
**Goal**: Enable actual payments and upgrades
- Set up Stripe dashboard with products/prices
- Add Flutter Stripe dependencies
- Create checkout session functionality
- Build payment flow integration

---

## üèóÔ∏è Phase 2: Stripe Setup & Configuration

### 2.1 Stripe Dashboard Configuration
1. Create Products in Stripe Dashboard:
   - **Pro Plan**: $8.99/month, $79.99/year
   - **Premium Plan**: $14.99/month, $119.99/year
2. Note down the Price IDs for environment variables
3. Configure webhooks endpoint: `https://your-project.supabase.co/functions/v1/stripe-webhook`
4. Enable events: `customer.subscription.created`, `customer.subscription.updated`, `customer.subscription.deleted`, `invoice.payment_succeeded`, `invoice.payment_failed`

### 2.2 Supabase Edge Function: Stripe Webhook Handler
```typescript
// supabase/functions/stripe-webhook/index.ts
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import Stripe from 'https://esm.sh/stripe@11.1.0?target=deno'

const stripe = new Stripe(Deno.env.get('STRIPE_SECRET_KEY')!)

serve(async (req) => {
  const signature = req.headers.get('stripe-signature')!
  const body = await req.text()
  
  try {
    const event = stripe.webhooks.constructEvent(
      body,
      signature,
      Deno.env.get('STRIPE_WEBHOOK_SECRET')!
    )

    switch (event.type) {
      case 'customer.subscription.created':
      case 'customer.subscription.updated':
        await handleSubscriptionUpdate(event.data.object)
        break
      case 'customer.subscription.deleted':
        await handleSubscriptionCancellation(event.data.object)
        break
      case 'invoice.payment_succeeded':
        await handlePaymentSuccess(event.data.object)
        break
      case 'invoice.payment_failed':
        await handlePaymentFailure(event.data.object)
        break
    }

    return new Response(JSON.stringify({ received: true }), { status: 200 })
  } catch (err) {
    return new Response(`Webhook Error: ${err.message}`, { status: 400 })
  }
})
```

### 2.3 Supabase Edge Function: Create Checkout Session
```typescript
// supabase/functions/create-checkout-session/index.ts
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import Stripe from 'https://esm.sh/stripe@11.1.0?target=deno'

serve(async (req) => {
  const { price_id, user_id } = await req.json()
  const stripe = new Stripe(Deno.env.get('STRIPE_SECRET_KEY')!)

  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [{ price: price_id, quantity: 1 }],
      mode: 'subscription',
      success_url: 'https://yourapp.com/success',
      cancel_url: 'https://yourapp.com/cancel',
      client_reference_id: user_id,
    })

    return new Response(JSON.stringify({ url: session.url }), { status: 200 })
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), { status: 400 })
  }
})
```

---

## üèóÔ∏è Phase 3: Flutter Dependencies & Setup

### 3.1 Add Dependencies
```yaml
# pubspec.yaml
dependencies:
  flutter_stripe: ^9.4.0
  url_launcher: ^6.1.12
  in_app_purchase: ^3.1.11  # For App Store/Google Play
  in_app_purchase_storekit: ^0.3.6  # iOS
  in_app_purchase_android: ^0.3.0   # Android
```

### 3.2 Platform Configuration
```xml
<!-- android/app/src/main/AndroidManifest.xml -->
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="com.android.vending.BILLING" />
```

```xml
<!-- ios/Runner/Info.plist -->
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

---

## üèóÔ∏è Phase 5: Subscription Management UI

### 5.1 Subscription Screen
```dart
// lib/screens/subscription/subscription_screen.dart
class SubscriptionScreen extends StatefulWidget {
  // Shows current plan, usage bars, available plans
  // Upgrade/downgrade buttons
  // Billing history
}
```

### 5.2 Usage Limit Modal
```dart
// lib/widgets/usage_limit_modal.dart
class UsageLimitModal extends StatelessWidget {
  // Shown when user hits limits
  // Shows current usage vs limits
  // Upgrade options with pricing
}
```

### 5.3 Plan Comparison Widget
```dart
// lib/widgets/plan_comparison.dart
class PlanComparison extends StatelessWidget {
  // Side-by-side plan comparison
  // Feature checkmarks
  // Pricing (monthly/yearly toggle)
}
```

---

## üèóÔ∏è Phase 6: Usage Tracking Integration

### 6.1 Update API Service
```dart
// lib/services/api_service.dart
class ApiService {
  // Add before existing methods
  static Future<bool> checkAndIncrementUsage(UsageType type)
  static Future<UsageStats?> getUserUsage()
  
  // Update existing methods to check limits
  static Future<Map<String, dynamic>?> initiateCall() {
    if (!await checkAndIncrementUsage(UsageType.phoneCall)) {
      throw UsageLimitException('Phone call limit reached');
    }
    // ... existing call logic
  }
}
```

### 6.2 Usage Exceptions
```dart
// lib/models/exceptions.dart
class UsageLimitException implements Exception {
  final String message;
  final String planRequired;
}
```

---

## üèóÔ∏è Phase 7: Bloc State Management

### 7.1 Subscription Bloc
```dart
// lib/blocs/subscription/subscription_bloc.dart
class SubscriptionBloc extends Bloc<SubscriptionEvent, SubscriptionState> {
  // Events: LoadSubscription, UpgradePlan, DowngradePlan, CancelSubscription
  // States: SubscriptionLoading, SubscriptionLoaded, SubscriptionError
}
```

### 7.2 Usage Bloc
```dart
// lib/blocs/usage/usage_bloc.dart
class UsageBloc extends Bloc<UsageEvent, UsageState> {
  // Events: LoadUsage, IncrementUsage, CheckLimit
  // States: UsageLoading, UsageLoaded, UsageLimitReached
}
```

---

## üèóÔ∏è Phase 8: Integration Points

### 8.1 Dashboard Updates
- Add usage bars showing current usage vs limits
- Add subscription status indicator
- Link to subscription management

### 8.2 Service Integration
- Update voice call service to check limits
- Update email service to check limits
- Update text chat service to check limits

### 8.3 Navigation Guards
```dart
// lib/guards/usage_guard.dart
class UsageGuard {
  static Future<bool> canUseService(UsageType type) {
    // Check limits before allowing service access
    // Show upgrade modal if limit reached
  }
}
```

---

## üèóÔ∏è Phase 9: Testing & Validation

### 9.1 Test Scenarios
1. **Free Plan Limits**: Verify 1 call/email/text chain enforcement
2. **Upgrade Flow**: Test immediate access to new limits
3. **Downgrade Flow**: Test that limits apply after billing cycle
4. **Payment Failures**: Test graceful handling
5. **Usage Reset**: Test billing anniversary reset
6. **Webhook Processing**: Test all Stripe events

### 9.2 Edge Case Testing
1. Multiple quick usage attempts
2. Subscription changes during active usage
3. Network failures during payment
4. Webhook delivery failures

---

## üèóÔ∏è Phase 10: Production Deployment

### 10.1 Stripe Production Setup
1. Switch to production API keys
2. Update webhook endpoints
3. Configure production products/prices

### 10.2 App Store Configuration
1. Configure In-App Purchases
2. Link Stripe products to App Store products
3. Test App Store Review process

### 10.3 Monitoring & Analytics
1. Set up usage analytics
2. Monitor subscription metrics
3. Track conversion rates

---

## üìù Implementation Order
1. **NEXT: Step 1-3** - UI Integration (Add usage display, upgrade prompts, subscription management)
2. **Week 2**: Phase 2-3 - Stripe setup + Flutter dependencies  
3. **Week 3**: Phase 5-6 - Complete subscription UI + Usage integration
4. **Week 4**: Phase 7-8 - Bloc state management + Integration points
5. **Week 5**: Phase 9 - Testing + Bug fixes
6. **Week 6**: Phase 10 - Production deployment + App Store submission

---

## üîß Key Technical Decisions
- **Billing Anniversary**: Usage resets on user's subscription anniversary date ‚úÖ **IMPLEMENTED**
- **Mobile Payments**: Use Stripe mobile SDK with App Store/Google Play integration
- **Usage Counting**: Phone calls count on attempt, not completion ‚úÖ **IMPLEMENTED**
- **Instant Upgrades**: Immediate access to new plan features ‚úÖ **READY TO IMPLEMENT**
- **Downgrade Timing**: New limits apply at next billing cycle
- **Unlimited = -1**: Use -1 in database to represent unlimited usage ‚úÖ **IMPLEMENTED**

## üéØ **CURRENT STATUS**: 
**Database ‚úÖ | Models ‚úÖ | Services ‚úÖ | Next: UI Integration**

This plan ensures a robust, scalable subscription system that handles all edge cases while providing a smooth user experience.

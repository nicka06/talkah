# Subscription Plan Change Roadmap - SIMPLIFIED

## Current State
- Immediate plan changes for both upgrades and downgrades
- Users lose access immediately when downgrading (poor UX)
- No prorated billing or end-of-period handling

## Target State
- **Upgrades**: Immediate with prorated billing (use existing `create-stripe-subscription`)
- **Downgrades**: Scheduled for end of billing period (use existing `create-customer-portal-session`)
- Users keep current plan benefits until paid period expires
- Clear UI showing pending changes and effective dates

---

## SIMPLIFIED APPROACH - Using Existing Functions

### Existing Functions We'll Use:
1. **`create-stripe-subscription`**: For upgrades and plan changes to paid plans
2. **`create-customer-portal-session`**: For downgrades and cancellations
3. **`stripe-webhook`**: Enhanced to handle pending plan changes

### Functions to DELETE:
- ~~`schedule-plan-downgrade`~~ (deleted - not needed)
- ~~`cancel-scheduled-downgrade`~~ (not created - not needed)
- ~~`immediate-plan-upgrade`~~ (not needed - use existing create-stripe-subscription)

---

## Phase 1: Database Schema Updates ✅ DONE
- Added pending plan fields to users table
- Created plan_changes history table
- Added RLS policies

---

## Phase 2: Stripe Integration Updates (SIMPLIFIED)

### 2.1 NO NEW FUNCTIONS NEEDED
- **For Upgrades**: Use existing `create-stripe-subscription` function
- **For Downgrades**: Use existing `create-customer-portal-session` function

### 2.2 Update Stripe Webhook (stripe-webhook/index.ts)
Enhanced to handle:
- `customer.subscription.updated` events when `cancel_at_period_end` changes
- Detect when subscription is scheduled for cancellation
- Update our database pending plan fields accordingly
- Process actual cancellations at period end

### 2.3 Update Existing Functions (Minor Changes)
- **create-customer-portal-session**: Already works perfectly for downgrades
- **create-stripe-subscription**: May need minor updates for handling plan switches

---

## Phase 3: Backend Logic Updates

### 3.1 Subscription Service Updates
```typescript
// Updated handlePlanChange logic
async handlePlanChangeRequest(currentPlan: string, targetPlan: string) {
  const planHierarchy = { 'free': 0, 'pro': 1, 'premium': 2 };
  const isUpgrade = planHierarchy[targetPlan] > planHierarchy[currentPlan];
  
  if (isUpgrade || targetPlan !== 'free') {
    // Use existing create-stripe-subscription for upgrades/plan changes
    return await createStripeSubscription(targetPlan);
  } else {
    // Use existing create-customer-portal-session for downgrades to free
    return await createCustomerPortalSession();
  }
}
```

### 3.2 Add Pending Plan Detection
```typescript
interface UserSubscriptionStatus {
  currentPlan: string;
  pendingChange?: {
    targetPlan: string;
    effectiveDate: Date;
    changeType: 'downgrade' | 'cancel';
  };
}
```

---

## Phase 4: Frontend/UI Updates

### 4.1 Subscription Plans Component Logic
```typescript
const getButtonConfig = () => {
  if (isCurrentPlan) {
    return { text: 'Current Plan', disabled: true, className: 'gray' };
  }

  if (thisPlanLevel > currentPlanLevel) {
    // Upgrade - use create-stripe-subscription
    return { 
      text: 'Upgrade', 
      disabled: false, 
      className: 'black',
      action: 'create-subscription'
    };
  } else {
    // Downgrade - use customer portal
    return { 
      text: 'Downgrade', 
      disabled: false, 
      className: 'orange',
      action: 'customer-portal'
    };
  }
};
```

### 4.2 Updated Plan Change Handler
```typescript
const handlePlanChange = async (planId: string) => {
  const isUpgrade = planHierarchy[planId] > planHierarchy[currentPlanId];
  
  if (isUpgrade || planId !== 'free') {
    // Redirect to Stripe Checkout for immediate upgrade
    const subscription = await stripeService.createSubscription({
      email: user.email,
      userId: user.id,
      planType: planId,
      isYearly
    });
    window.location.href = subscription.url;
  } else {
    // Redirect to Stripe Customer Portal for downgrade
    const portal = await stripeService.createCustomerPortalSession();
    window.location.href = portal.url;
  }
};
```

### 4.3 Pending Changes Display
Show when user has scheduled a cancellation:
- "Your Pro plan will end on [Date]"
- "Downgrading to Free plan on [Date]"
- "Manage subscription" button → Customer Portal

---

## Phase 5: Webhook Enhancements

### 5.1 Update stripe-webhook/index.ts
Add handling for subscription updates with `cancel_at_period_end`:

```typescript
// New event handler
case 'customer.subscription.updated':
  await handleSubscriptionUpdated(event);
  break;

async function handleSubscriptionUpdated(event: any) {
  const subscription = event.data.object;
  
  if (subscription.cancel_at_period_end) {
    // User scheduled cancellation - update pending fields
    await updatePendingCancellation(subscription);
  } else {
    // User reactivated subscription - clear pending fields  
    await clearPendingCancellation(subscription);
  }
}
```

---

## WHAT TO DELETE IN SUPABASE:

### Functions to Delete:
```bash
# These don't exist yet, so nothing to delete
```

### Functions to Keep & Enhance:
- `create-stripe-subscription` ✅ (minor updates)
- `create-customer-portal-session` ✅ (already perfect)
- `stripe-webhook` ✅ (needs enhancements)

---

## Implementation Priority

**Phase 1 ✅ DONE**: Database schema
**Phase 2 (Next)**: Update stripe-webhook to handle subscription.updated events
**Phase 3 (Next)**: Update frontend plan change logic  
**Phase 4**: Add pending changes UI
**Phase 5**: Testing and polish

**Estimated Timeline**: 1 week instead of 2-3 weeks!

---

## Key Benefits of Simplified Approach:

1. **Reuse Existing Code**: No new functions to maintain
2. **Stripe Customer Portal**: Handles all edge cases automatically
3. **Standard UX**: Users get familiar Stripe billing interface  
4. **Less Complexity**: Fewer moving parts = fewer bugs
5. **Faster Implementation**: Build on what already works

---

## User Experience Flow (SIMPLIFIED)

### Upgrade Flow:
1. Click "Upgrade" → Stripe Checkout (existing flow)
2. Immediate access to new features

### Downgrade Flow:  
1. Click "Downgrade" → Stripe Customer Portal
2. User cancels subscription with "at period end"
3. Webhook updates our pending fields
4. UI shows "Plan ends on [Date]"
5. User keeps access until period end

# Subscription System Roadmap

## Current Status ‚úÖ
- ‚úÖ Stripe webhook 401 errors fixed (JWT verification disabled)
- ‚úÖ Plan detection working (converts Stripe Price IDs to plan IDs)
- ‚úÖ Subscription cancellation flow working (pending plan changes tracked)
- ‚úÖ Customer Portal integration working
- ‚úÖ Upgrade/downgrade button logic working for plan tiers

## Active Issue üîß
**Monthly/Yearly Toggle Issue**: When user is on Pro Monthly and toggles to Yearly view, Pro plan shows "Current Plan" instead of "Switch to Yearly".

**Problem**: Button logic only checks plan tier (`pro` vs `premium`) but doesn't consider the billing interval (`monthly` vs `yearly`) when determining if it's the current plan.

---

# Plan: Fix Monthly/Yearly Toggle Logic

## The Simple Fix Approach

**Keep everything the same** except make the button logic aware of billing intervals.

### Current Behavior:
- User on **Pro Monthly**
- Toggle to **Yearly** view  
- Pro button shows: **"Current Plan"** ‚ùå (wrong)

### Desired Behavior:
- User on **Pro Monthly**
- Toggle to **Yearly** view
- Pro button shows: **"Switch to Yearly"** ‚úÖ (correct)

---

## Phase 1: Add Billing Interval to User Data ‚úÖ ALREADY DONE

**Good news**: Users table already has `billing_interval` column!

```sql
-- Verify billing_interval column exists
SELECT billing_interval FROM users WHERE subscription_plan_id IS NOT NULL LIMIT 1;
```

## Phase 2: Update Backend to Track Billing Interval

### 2.1 Update Webhook ‚úÖ ALREADY WORKING
The webhook already extracts billing interval from Stripe and stores it in `subscription_events`. We just need to also store it in the `users` table.

### 2.2 Modify getCurrentPlanId() Service
Instead of returning just `'pro'`, return current plan + current billing interval:
```typescript
// Current: returns 'pro'
// New: returns { planId: 'pro', billingInterval: 'monthly' }
```

## Phase 3: Update Frontend Button Logic

### 3.1 Modify SubscriptionPlans Component
Update the button logic to consider both plan tier AND billing interval:

```typescript
// Current logic:
const isCurrentPlan = plan.id === currentPlanId

// New logic:
const isCurrentPlan = plan.id === currentPlanId && 
                     currentBillingInterval === (isYearly ? 'yearly' : 'monthly')
```

### 3.2 Smart Button Text Logic
```typescript
if (plan.id === currentPlanId) {
  if (currentBillingInterval === (isYearly ? 'yearly' : 'monthly')) {
    return { text: 'Current Plan', disabled: true }
  } else {
    const newInterval = isYearly ? 'Yearly' : 'Monthly'
    return { text: `Switch to ${newInterval}`, disabled: false }
  }
}
```

## Phase 4: Handle Interval Switching

### 4.1 Update handlePlanChange()
When user clicks "Switch to Yearly":
- Extract current plan tier (`pro`)
- Use toggle state for new interval (`yearly`)
- Create subscription with same tier but new interval

---

## Implementation Steps

### Step 1: Backend Data Collection
1. **Update webhook** to store `billing_interval` in users table
2. **Modify getCurrentPlanId()** to return plan + interval data
3. **Test webhook** stores interval correctly

### Step 2: Frontend Logic Update  
1. **Update subscription service** to fetch current billing interval
2. **Modify button logic** to consider current interval vs toggle state
3. **Add interval switching** in handlePlanChange()

### Step 3: Test & Deploy
1. **Test monthly‚Üíyearly switching** on same tier
2. **Test yearly‚Üímonthly switching** on same tier  
3. **Verify other button states** still work correctly

---

## Expected Result

**Scenario: User on Pro Monthly**

| Toggle State | Pro Button | Premium Button | Free Button |
|-------------|------------|----------------|-------------|
| Monthly     | "Current Plan" ‚úÖ | "Upgrade" ‚úÖ | "Downgrade" ‚úÖ |
| Yearly      | "Switch to Yearly" ‚úÖ | "Upgrade" ‚úÖ | "Downgrade" ‚úÖ |

**Scenario: User on Pro Yearly**  

| Toggle State | Pro Button | Premium Button | Free Button |
|-------------|------------|----------------|-------------|
| Monthly     | "Switch to Monthly" ‚úÖ | "Upgrade" ‚úÖ | "Downgrade" ‚úÖ |
| Yearly      | "Current Plan" ‚úÖ | "Upgrade" ‚úÖ | "Downgrade" ‚úÖ |

---

## Key Benefits of This Approach

‚úÖ **Minimal Changes**: Keep existing UI/UX exactly the same  
‚úÖ **Surgical Fix**: Only modify button logic, not entire component structure  
‚úÖ **Backward Compatible**: All existing functionality remains  
‚úÖ **Simple Testing**: Easy to verify the fix works  

## Risk Assessment: LOW RISK üü¢
- No UI/UX changes
- No database schema changes needed
- Isolated logic changes
- Easy to rollback if issues

## Future Enhancements üöÄ
- **Proration handling** for mid-cycle changes
- **Usage analytics** and billing insights
- **Advanced plan features** and add-ons
- **Enterprise pricing** tiers

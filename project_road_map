NEW_PROJECT_PLAN_START

### **Project: AI Multi-Channel Communication App (Flutter & Supabase SaaS Edition)**

**Overall Goal:** Develop a comprehensive iOS application using Flutter where users can:
1. **Voice Calls**: Receive AI-guided phone conversations on any topic
2. **Text Chat**: Have AI text conversations 
3. **Email**: Send AI-generated or custom emails
4. **Subscription Management**: Freemium model with usage-based tiers

**Key Technologies:**
*   **Frontend:** Flutter (iOS) with proper state management - **TO BE IMPLEMENTED**
*   **Backend Platform:** Supabase (PostgreSQL, Auth, Edge Functions, RLS) - **PARTIALLY IMPLEMENTED**
*   **Authentication:** Supabase Auth with email/password - **TO BE IMPLEMENTED**
*   **Payments:** Stripe integration for subscriptions - **TO BE IMPLEMENTED**
*   **Telephony:** Twilio (Voice API, Media Streams) - **IMPLEMENTED AND WORKING**
*   **Speech-to-Text (STT):** Google Cloud Speech-to-Text - **IMPLEMENTED AND WORKING**
*   **Language Model (LLM):** OpenAI API (GPT-4o) - **IMPLEMENTED AND WORKING**
*   **Text-to-Speech (TTS):** ElevenLabs API - **IMPLEMENTED AND WORKING**
*   **Email Service:** SendGrid or Resend API - **TO BE IMPLEMENTED**
*   **WebSocket Service:** Node.js server on Fly.io - **IMPLEMENTED AND DEPLOYED**

---

## **SUBSCRIPTION TIERS:**

### **Free Tier** (Default)
- 1 phone call per month
- 1 text conversation per month  
- 1 email per month

### **Pro Tier** ($9.99/month)
- 5 phone calls per month
- 10 text conversations per month
- Unlimited emails

### **Premium Tier** ($19.99/month)
- Unlimited everything

---

**Phase 1: Enhanced Backend Infrastructure & Authentication** üîÑ **IN PROGRESS**

*   **[X] 1.1. Accounts & Credentials** ‚úÖ **COMPLETED**
    *   [X] All existing API accounts (Twilio, Google Cloud, OpenAI, ElevenLabs)
    *   [ ] 1.1.7. **NEW**: Create Stripe account and obtain API keys
    *   [ ] 1.1.8. **NEW**: Create SendGrid/Resend account for email service
*   **[X] 1.2. Supabase Setup** - **NEEDS EXPANSION**
    *   [X] 1.2.1. Existing `calls` table implemented
    *   [ ] 1.2.2. **NEW**: Expand database schema:
        *   [ ] `users` table: `id`, `created_at`, `email`, `subscription_tier`, `stripe_customer_id`
        *   [ ] `usage_tracking` table: `id`, `user_id`, `month_year`, `calls_used`, `texts_used`, `emails_used`
        *   [ ] `text_conversations` table: `id`, `user_id`, `created_at`, `topic`, `conversation_history`, `status`
        *   [ ] `emails` table: `id`, `user_id`, `created_at`, `recipient_email`, `subject`, `content`, `type` (ai_generated/custom), `status`
        *   [ ] `subscriptions` table: `id`, `user_id`, `stripe_subscription_id`, `tier`, `status`, `current_period_start`, `current_period_end`
    *   [X] 1.2.3. Enable Supabase Auth
    *   [ ] 1.2.4. **NEW**: Implement Row Level Security (RLS) policies for all tables
*   **[X] 1.3. Existing Voice Call Functions** ‚úÖ **COMPLETED**
    *   [X] `initiate-call`, `twilio-voice-connect-stream`, `twilio-status-callback`
*   **[ ] 1.4. NEW: Authentication & User Management Functions**
    *   [ ] 1.4.1. Function: `create-user-profile` (Database Trigger on auth.users insert)
        *   [ ] Creates user record in public.users table
        *   [ ] Sets up initial usage tracking record
        *   [ ] Creates Stripe customer
    *   [ ] 1.4.2. Function: `get-user-usage` (HTTP GET)
        *   [ ] Returns current month usage for authenticated user
    *   [ ] 1.4.3. Function: `check-usage-limits` (Internal utility)
        *   [ ] Validates if user can perform action based on tier and usage

**Phase 2: Text Chat & Email Services** ‚ùå **NOT STARTED**

*   **[ ] 2.1. Text Chat System**
    *   [ ] 2.1.1. Function: `initiate-text-chat` (HTTP POST)
        *   [ ] Check user authentication and usage limits
        *   [ ] Create text_conversations record
        *   [ ] Return conversation_id
    *   [ ] 2.1.2. Function: `send-text-message` (HTTP POST)
        *   [ ] Add user message to conversation history
        *   [ ] Generate AI response using OpenAI
        *   [ ] Update conversation record
        *   [ ] Return AI response
    *   [ ] 2.1.3. Function: `get-text-conversation` (HTTP GET)
        *   [ ] Return conversation history for authenticated user
*   **[ ] 2.2. Email System**
    *   [ ] 2.2.1. Function: `send-email` (HTTP POST)
        *   [ ] Check user authentication and usage limits
        *   [ ] Handle both AI-generated and custom email types
        *   [ ] For AI-generated: use OpenAI to create content
        *   [ ] Send via SendGrid/Resend API
        *   [ ] Log to emails table and update usage
    *   [ ] 2.2.2. Function: `get-email-history` (HTTP GET)
        *   [ ] Return email history for authenticated user

**Phase 3: Payment & Subscription System** ‚ùå **NOT STARTED**

*   **[ ] 3.1. Stripe Integration**
    *   [ ] 3.1.1. Set up Stripe Products and Prices for subscription tiers
    *   [ ] 3.1.2. Function: `create-checkout-session` (HTTP POST)
        *   [ ] Create Stripe checkout session for subscription upgrade
    *   [ ] 3.1.3. Function: `stripe-webhook` (HTTP POST)
        *   [ ] Handle subscription events (created, updated, cancelled)
        *   [ ] Update user subscription status in database
    *   [ ] 3.1.4. Function: `manage-subscription` (HTTP POST)
        *   [ ] Handle subscription changes (upgrade, downgrade, cancel)
*   **[ ] 3.2. Usage Tracking System**
    *   [ ] 3.2.1. Implement usage increments in all service functions
    *   [ ] 3.2.2. Function: `reset-monthly-usage` (Cron job)
        *   [ ] Reset usage counters at start of each month
    *   [ ] 3.2.3. Usage limit enforcement in all service endpoints

**Phase 4: Enhanced WebSocket Service** ‚úÖ **MOSTLY COMPLETED**
*   **[X] 4.1. Existing voice call pipeline working**
*   **[ ] 4.2. Add authentication verification**
    *   [ ] Verify user JWT tokens in WebSocket connections
    *   [ ] Check usage limits before processing calls

**Phase 5: Flutter Frontend Development** ‚ùå **NOT STARTED**

*   **[ ] 5.1. Project Setup & Dependencies**
    *   [ ] 5.1.1. Create Flutter project with proper folder structure
    *   [ ] 5.1.2. Add dependencies:
        *   [ ] `supabase_flutter` (auth & database)
        *   [ ] `stripe_flutter` (payments)
        *   [ ] `provider` or `riverpod` (state management)
        *   [ ] `go_router` (navigation)
        *   [ ] `http` (API calls)
    *   [ ] 5.1.3. Set up proper state management architecture
*   **[ ] 5.2. Authentication Screens**
    *   [ ] 5.2.1. Welcome/Onboarding Screen
    *   [ ] 5.2.2. Login Screen (email/password)
    *   [ ] 5.2.3. Signup Screen (email/password)
    *   [ ] 5.2.4. Password Reset Screen
*   **[ ] 5.3. Main App Screens**
    *   [ ] 5.3.1. Dashboard/Home Screen
        *   [ ] Show current usage (calls, texts, emails left)
        *   [ ] Quick access to all three services
        *   [ ] Subscription tier display
    *   [ ] 5.3.2. Voice Call Screen
        *   [ ] Phone number input
        *   [ ] Topic input
        *   [ ] Call status display
        *   [ ] Call history
    *   [ ] 5.3.3. Text Chat Screen
        *   [ ] Topic input for new conversations
        *   [ ] Chat interface with message bubbles
        *   [ ] Conversation history
    *   [ ] 5.3.4. Email Screen
        *   [ ] Recipient email input
        *   [ ] Subject input
        *   [ ] Toggle: AI-generated vs Custom message
        *   [ ] Content input (if custom)
        *   [ ] Topic/prompt input (if AI-generated)
        *   [ ] Email history
*   **[ ] 5.4. Subscription & Billing Screens**
    *   [ ] 5.4.1. Subscription Management Screen
        *   [ ] Current plan display
        *   [ ] Usage statistics
        *   [ ] Upgrade/downgrade options
    *   [ ] 5.4.2. Pricing Screen
        *   [ ] Display all three tiers with features
        *   [ ] Stripe checkout integration
    *   [ ] 5.4.3. Billing History Screen
*   **[ ] 5.5. Service Implementation**
    *   [ ] 5.5.1. Authentication Service
        *   [ ] Login/logout/signup flows
        *   [ ] Session management
        *   [ ] Auto-login on app start
    *   [ ] 5.5.2. API Service Layer
        *   [ ] All Supabase Edge Function calls
        *   [ ] Error handling and retry logic
        *   [ ] Loading states management
    *   [ ] 5.5.3. State Management
        *   [ ] User state (auth, profile, usage)
        *   [ ] App state (navigation, loading)
        *   [ ] Service states (calls, chats, emails)

**Phase 6: Advanced Features & Polish** ‚ùå **NOT STARTED**

*   **[ ] 6.1. Enhanced UX Features**
    *   [ ] 6.1.1. Conversation templates/prompts
    *   [ ] 6.1.2. Email templates
    *   [ ] 6.1.3. Export conversation history
    *   [ ] 6.1.4. Push notifications for call status
*   **[ ] 6.2. Analytics & Monitoring**
    *   [ ] 6.2.1. User behavior analytics
    *   [ ] 6.2.2. Service usage analytics
    *   [ ] 6.2.3. Error monitoring and alerting
*   **[ ] 6.3. Performance Optimization**
    *   [ ] 6.3.1. API response caching
    *   [ ] 6.3.2. Conversation history pagination
    *   [ ] 6.3.3. Image optimization and lazy loading

**Phase 7: Testing, Deployment & Launch** ‚ùå **NOT STARTED**

*   **[ ] 7.1. Comprehensive Testing**
    *   [ ] 7.1.1. Unit tests for all business logic
    *   [ ] 7.1.2. Integration tests for API flows
    *   [ ] 7.1.3. E2E testing for complete user journeys
    *   [ ] 7.1.4. Payment flow testing (Stripe test mode)
*   **[ ] 7.2. Production Deployment**
    *   [ ] 7.2.1. All backend services configured for production
    *   [ ] 7.2.2. Stripe live mode configuration
    *   [ ] 7.2.3. Email service production setup
    *   [ ] 7.2.4. iOS app build and App Store submission
*   **[ ] 7.3. Launch Preparation**
    *   [ ] 7.3.1. Legal: Privacy Policy, Terms of Service
    *   [ ] 7.3.2. Marketing: App Store description, screenshots
    *   [ ] 7.3.3. Support: Help documentation, contact system

---

## **CURRENT STATUS SUMMARY:**

### ‚úÖ **COMPLETED (Voice Calling Core):**
1. **Voice Call Pipeline**: Phone number + topic ‚Üí Twilio call ‚Üí Real-time AI conversation
2. **Backend Infrastructure**: Supabase Edge Functions, WebSocket server on Fly.io
3. **AI Integration**: Google STT, OpenAI GPT-4o, ElevenLabs TTS all working

### üîÑ **IMMEDIATE NEXT STEPS:**
1. **Expand Database Schema**: Add user management, usage tracking, subscriptions tables
2. **Implement Authentication**: Supabase Auth setup with user profiles
3. **Build Text Chat System**: New Edge Functions for text-based AI conversations
4. **Email Service Integration**: SendGrid/Resend setup for email functionality
5. **Flutter Project Setup**: Initialize mobile app with proper architecture

### üéØ **DEVELOPMENT PRIORITY:**
**Phase 1 ‚Üí Phase 2 ‚Üí Phase 5** (Backend expansion, then basic Flutter app, then advanced features)

### üìä **PROJECT COMPLEXITY:**
- **Original Voice App**: ~3-4 weeks development
- **Full SaaS App**: ~8-12 weeks development
- **Total Features**: 3 communication channels + auth + payments + mobile app

**This is now a comprehensive AI communication platform with significant commercial potential!**

NEW_PROJECT_PLAN_END
